// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebClinic.Models;

#nullable disable

namespace WebClinic.Migrations
{
    [DbContext(typeof(ClinicContext))]
    [Migration("20240330201115_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebClinic.Models.DiseaseHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateRecord")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_record");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("text")
                        .HasColumnName("diagnosis");

                    b.Property<int?>("FkEmployee")
                        .HasColumnType("integer")
                        .HasColumnName("fk_employee");

                    b.Property<int?>("FkPatient")
                        .HasColumnType("integer")
                        .HasColumnName("fk_patient");

                    b.Property<string>("Therapy")
                        .HasColumnType("text")
                        .HasColumnName("therapy");

                    b.HasKey("Id")
                        .HasName("disease_history_pkey");

                    b.HasIndex("FkEmployee");

                    b.HasIndex("FkPatient");

                    b.ToTable("disease_history", (string)null);
                });

            modelBuilder.Entity("WebClinic.Models.Employe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birthdate");

                    b.Property<int?>("DeleteFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("delete_flag");

                    b.Property<int?>("FkSpeciality")
                        .HasColumnType("integer")
                        .HasColumnName("fk_speciality");

                    b.Property<int?>("FkUsers")
                        .HasColumnType("integer")
                        .HasColumnName("fk_users");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("patronymic");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("employes_pkey");

                    b.HasIndex("FkSpeciality");

                    b.HasIndex("FkUsers");

                    b.ToTable("employes", (string)null);
                });

            modelBuilder.Entity("WebClinic.Models.MedicalService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DeleteFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("delete_flag");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("FkSpeciality")
                        .HasColumnType("integer")
                        .HasColumnName("fk_speciality");

                    b.Property<string>("NameService")
                        .HasColumnType("text")
                        .HasColumnName("name_service");

                    b.Property<int?>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("medical_services_pkey");

                    b.HasIndex("FkSpeciality");

                    b.ToTable("medical_services", (string)null);
                });

            modelBuilder.Entity("WebClinic.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birthdate");

                    b.Property<int?>("FkUsers")
                        .HasColumnType("integer")
                        .HasColumnName("fk_users");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("patronymic");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("patient_pkey");

                    b.HasIndex("FkUsers");

                    b.ToTable("patient", (string)null);
                });

            modelBuilder.Entity("WebClinic.Models.Phonebook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("FkUsers")
                        .HasColumnType("integer")
                        .HasColumnName("fk_users");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.HasKey("Id")
                        .HasName("phonebook_pkey");

                    b.HasIndex("FkUsers");

                    b.ToTable("phonebook", (string)null);
                });

            modelBuilder.Entity("WebClinic.Models.Record", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateRecords")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_records");

                    b.Property<int?>("FkEmployee")
                        .HasColumnType("integer")
                        .HasColumnName("fk_employee");

                    b.Property<int?>("FkPatient")
                        .HasColumnType("integer")
                        .HasColumnName("fk_patient");

                    b.Property<int?>("FkService")
                        .HasColumnType("integer")
                        .HasColumnName("fk_service");

                    b.HasKey("Id")
                        .HasName("records_pkey");

                    b.HasIndex("FkEmployee");

                    b.HasIndex("FkPatient");

                    b.HasIndex("FkService");

                    b.ToTable("records", (string)null);
                });

            modelBuilder.Entity("WebClinic.Models.Rollback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("changes");

                    b.Property<string>("Method_")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("method_");

                    b.Property<string>("TabName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tab_name");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time");

                    b.HasKey("Id")
                        .HasName("id");

                    b.ToTable("rollback_table", (string)null);
                });

            modelBuilder.Entity("WebClinic.Models.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DeleteFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("delete_flag");

                    b.Property<string>("NameSpeciality")
                        .HasColumnType("text")
                        .HasColumnName("name_speciality");

                    b.HasKey("Id")
                        .HasName("specialities_pkey");

                    b.ToTable("specialities", (string)null);
                });

            modelBuilder.Entity("WebClinic.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("login");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("pass");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Login" }, "login_unique")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("WebClinic.Models.DiseaseHistory", b =>
                {
                    b.HasOne("WebClinic.Models.Employe", "FkEmployeeNavigation")
                        .WithMany("DiseaseHistories")
                        .HasForeignKey("FkEmployee")
                        .HasConstraintName("disease_history_fk_employee_fkey");

                    b.HasOne("WebClinic.Models.Patient", "FkPatientNavigation")
                        .WithMany("DiseaseHistories")
                        .HasForeignKey("FkPatient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("disease_history_fk_patient_fkey");

                    b.Navigation("FkEmployeeNavigation");

                    b.Navigation("FkPatientNavigation");
                });

            modelBuilder.Entity("WebClinic.Models.Employe", b =>
                {
                    b.HasOne("WebClinic.Models.Speciality", "FkSpecialityNavigation")
                        .WithMany("Employes")
                        .HasForeignKey("FkSpeciality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("employes_fk_speciality_fkey");

                    b.HasOne("WebClinic.Models.User", "FkUsersNavigation")
                        .WithMany("Employes")
                        .HasForeignKey("FkUsers")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("employes_fk_users_fkey");

                    b.Navigation("FkSpecialityNavigation");

                    b.Navigation("FkUsersNavigation");
                });

            modelBuilder.Entity("WebClinic.Models.MedicalService", b =>
                {
                    b.HasOne("WebClinic.Models.Speciality", "FkSpecialityNavigation")
                        .WithMany("MedicalServices")
                        .HasForeignKey("FkSpeciality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("medical_services_fk_speciality_fkey");

                    b.Navigation("FkSpecialityNavigation");
                });

            modelBuilder.Entity("WebClinic.Models.Patient", b =>
                {
                    b.HasOne("WebClinic.Models.User", "FkUsersNavigation")
                        .WithMany("Patients")
                        .HasForeignKey("FkUsers")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("patient_fk_users_fkey");

                    b.Navigation("FkUsersNavigation");
                });

            modelBuilder.Entity("WebClinic.Models.Phonebook", b =>
                {
                    b.HasOne("WebClinic.Models.User", "FkUsersNavigation")
                        .WithMany("Phonebooks")
                        .HasForeignKey("FkUsers")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("phonebook_fk_users_fkey");

                    b.Navigation("FkUsersNavigation");
                });

            modelBuilder.Entity("WebClinic.Models.Record", b =>
                {
                    b.HasOne("WebClinic.Models.Employe", "FkEmployeeNavigation")
                        .WithMany("Records")
                        .HasForeignKey("FkEmployee")
                        .HasConstraintName("records_fk_employee_fkey");

                    b.HasOne("WebClinic.Models.Patient", "FkPatientNavigation")
                        .WithMany("Records")
                        .HasForeignKey("FkPatient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("records_fk_patient_fkey");

                    b.HasOne("WebClinic.Models.MedicalService", "FkServiceNavigation")
                        .WithMany("Records")
                        .HasForeignKey("FkService")
                        .HasConstraintName("records_fk_service_fkey");

                    b.Navigation("FkEmployeeNavigation");

                    b.Navigation("FkPatientNavigation");

                    b.Navigation("FkServiceNavigation");
                });

            modelBuilder.Entity("WebClinic.Models.Employe", b =>
                {
                    b.Navigation("DiseaseHistories");

                    b.Navigation("Records");
                });

            modelBuilder.Entity("WebClinic.Models.MedicalService", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("WebClinic.Models.Patient", b =>
                {
                    b.Navigation("DiseaseHistories");

                    b.Navigation("Records");
                });

            modelBuilder.Entity("WebClinic.Models.Speciality", b =>
                {
                    b.Navigation("Employes");

                    b.Navigation("MedicalServices");
                });

            modelBuilder.Entity("WebClinic.Models.User", b =>
                {
                    b.Navigation("Employes");

                    b.Navigation("Patients");

                    b.Navigation("Phonebooks");
                });
#pragma warning restore 612, 618
        }
    }
}
